input {
    jdbc {
        jdbc_driver_class => "org.postgresql.Driver"
        jdbc_driver_library => "/usr/share/logstash/drivers/postgresql-42.2.5.jar"
        jdbc_connection_string => "jdbc:postgresql://db:5432/asts"
        #jdbc_connection_string => "jdbc:postgresql://db:5432/${POSTGRES_DB}"
        jdbc_validate_connection => true
        jdbc_user => "postgres"
        #jdbc_user => "${POSTGRES_USER}"
        jdbc_password => "root"
        #jdbc_password => "${POSTGRES_PASSWORD}"

        #tracking_column => "unix_ts_in_secs"
        #use_column_value => true
        #tracking_column_type => "numeric"
        schedule => "*/5 * * * * *"
        #statement => "SELECT *, extract(epoch from last_modified_date) AS unix_ts_in_secs FROM movie WHERE (extract(epoch from last_modified_date) > :sql_last_value AND last_modified_date < NOW()) ORDER BY last_modified_date ASC"
        #schedule => "* * * * *"
        statement => "SELECT * from news where id > :sql_last_value order by id ASC;"   # 기사가 수정될것을 고려하지 않음
        use_column_value => true
        tracking_column => "id"
        tracking_column_type => "numeric"
    }
}
filter {
  date {
    locale => "ko"
    match => ["created_date","yyyy-MM-dd HH:mm:ss"]
    timezone => "Asia/Seoul"
    target => "created_date"
  }
  date {
    locale => "ko"
    match => ["last_modified_date","yyyy-MM-dd HH:mm:ss"]
    timezone => "Asia/Seoul"
    target => "last_modified_date"
  }
  mutate {
    copy => { "id" => "[@metadata][_id]"}
    remove_field => ["id", "@version", "unix_ts_in_secs","@timestamp"]
  }
}

output {
    elasticsearch {
        hosts => ["elasticsearch:9200"]
        index => "news"
        document_id => "%{[@metadata][_id]}"
    }
    stdout{
        codec => rubydebug { }
    }
}